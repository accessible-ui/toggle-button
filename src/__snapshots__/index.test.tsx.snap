// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ToggleButton> should be on by default when defaultActive: off 1`] = `
<DocumentFragment>
  <button
    aria-pressed="false"
    data-testid="btn"
    role="button"
    tabindex="0"
  >
    false
  </button>
</DocumentFragment>
`;

exports[`<ToggleButton> should be on by default when defaultActive: on 1`] = `
<DocumentFragment>
  <button
    aria-pressed="true"
    data-testid="btn"
    role="button"
    tabindex="0"
  >
    true
  </button>
</DocumentFragment>
`;

exports[`<ToggleButton> should be on by default when defaultActive: on initially 1`] = `
<DocumentFragment>
  <button
    aria-pressed="true"
    data-testid="btn"
    role="button"
    tabindex="0"
  >
    true
  </button>
</DocumentFragment>
`;

exports[`<ToggleButton> should have activeClass and inactiveClass: off 1`] = `
<DocumentFragment>
  <button
    aria-pressed="false"
    class="off"
    data-testid="btn"
    role="button"
    tabindex="0"
  >
    toggle me
  </button>
</DocumentFragment>
`;

exports[`<ToggleButton> should have activeClass and inactiveClass: on 1`] = `
<DocumentFragment>
  <button
    aria-pressed="true"
    class="on"
    data-testid="btn"
    role="button"
    tabindex="0"
  >
    toggle me
  </button>
</DocumentFragment>
`;

exports[`<ToggleButton> should have activeStyle and inactiveStyle: off 1`] = `
<DocumentFragment>
  <button
    aria-pressed="false"
    data-testid="btn"
    role="button"
    style="color: red;"
    tabindex="0"
  >
    toggle me
  </button>
</DocumentFragment>
`;

exports[`<ToggleButton> should have activeStyle and inactiveStyle: on 1`] = `
<DocumentFragment>
  <button
    aria-pressed="true"
    data-testid="btn"
    role="button"
    style="color: green;"
    tabindex="0"
  >
    toggle me
  </button>
</DocumentFragment>
`;

exports[`<ToggleButton> should not toggle on click when in a controlled state: on 1`] = `
<DocumentFragment>
  <button
    aria-pressed="true"
    data-testid="btn"
    role="button"
    tabindex="0"
  >
    true
  </button>
</DocumentFragment>
`;

exports[`<ToggleButton> should not toggle on click when in a controlled state: on initially 1`] = `
<DocumentFragment>
  <button
    aria-pressed="true"
    data-testid="btn"
    role="button"
    tabindex="0"
  >
    true
  </button>
</DocumentFragment>
`;

exports[`<ToggleButton> should provide context to function child 1`] = `
Object {
  "active": false,
  "off": [Function],
  "on": [Function],
  "toggle": [Function],
}
`;

exports[`<ToggleButton> should toggle on/off on click: off 1`] = `
<DocumentFragment>
  <button
    aria-pressed="false"
    data-testid="btn"
    role="button"
    tabindex="0"
  >
    false
  </button>
</DocumentFragment>
`;

exports[`<ToggleButton> should toggle on/off on click: off initially 1`] = `
<DocumentFragment>
  <button
    aria-pressed="false"
    data-testid="btn"
    role="button"
    tabindex="0"
  >
    false
  </button>
</DocumentFragment>
`;

exports[`<ToggleButton> should toggle on/off on click: on 1`] = `
<DocumentFragment>
  <button
    aria-pressed="true"
    data-testid="btn"
    role="button"
    tabindex="0"
  >
    true
  </button>
</DocumentFragment>
`;

exports[`useToggleButton() should return context 1`] = `
Object {
  "active": false,
  "off": [Function],
  "on": [Function],
  "toggle": [Function],
}
`;
